/* -----------------------------------------------------------------------------
  Filename:    PduR_CanTp.h
  Description: Toolversion: 18.00.01.01.30.06.49.00.00.00
               
               Serial Number: CBD1300649
               Customer Info: Nxtr Automotive Corporation
                              Package: MSR Fiat SLP4 - MSR Fiat SLP4
                              Micro: 0812BPGEQQ1
                              Compiler: TexasInstruments 4.9.5
               
               
               Generator Fwk   : GENy 
               Generator Module: PduR
               
               Configuration   : C:\SynergyProjects\Fiasa_326_327_EPS_TMS570-nzx5jd\Fiasa_326_327_EPS_TMS570\Tools\AsrProject\Config\ECUC\EPS.ecuc.vdsxml
               
               ECU: 
                       TargetSystem: Hw_Tms470/570Cpu (Dcan)
                       Compiler:     TexasInstruments
                       Derivates:    TMS570LS30316U
               
               Channel "CCAN":
                       Databasefile: 
                       Bussystem:    CAN
                       Manufacturer: Vector
                       Node:         CanStateManagerConfiguration

  Generated by , 2015-05-29  15:06:43
 ----------------------------------------------------------------------------- */
/* -----------------------------------------------------------------------------
  C O P Y R I G H T
 -------------------------------------------------------------------------------
  Copyright (c) 2001-2011 by Vctr Informatik GmbH. All rights reserved.
 
  This software is copyright protected and proprietary to Vctr Informatik 
  GmbH.
  
  Vctr Informatik GmbH grants to you only those rights as set out in the 
  license conditions.
  
  All other rights remain with Vctr Informatik GmbH.
 -------------------------------------------------------------------------------
 ----------------------------------------------------------------------------- */

#if !defined(PDUR_CANTP_H)
#define PDUR_CANTP_H

/* -----------------------------------------------------------------------------
    &&&~ INCLUDES
 ----------------------------------------------------------------------------- */

#include "PduR.h"


/* -----------------------------------------------------------------------------
    &&&~ COMPATIBILITY DEFINES
 ----------------------------------------------------------------------------- */




#define PDUR_START_SEC_CODE
/*lint -save -esym(961, 19.1) */
/* PRQA S 5087 1 */ /* MD_MSR_19.1 */
#include "MemMap.h"
/*lint -restore */

/* -----------------------------------------------------------------------------
    &&&~ GLOBAL FUNCTION PROTOTYPES
 ----------------------------------------------------------------------------- */

/**
\brief    This function is called by the CanTp or CddDobt to receive data of a TP SDU.\n
          With each call to this function the PDU Router provides a buffer (chunk) for the received TP data.\n
          Several calls may be made during transportation of an I-PDU.\n
          The PDU Router evaluates the CanTp I-PDU handle and performs appropriate handle and port conversion.\n
          The call is routed to an upper Tp or gateway module using the appropriate I-PDU handle of the destination\n
          layer.
\param    CanTpRxPduId        ID of the CanTp I-PDU that will be received
\param    TpSduLength         Length of the entire CanTp TP SDU which will be received
\param    PduInfoPtr          Pointer to the buffer (SduDataPtr) and its length (SduLength)\n
                              of a receive buffer. If the return value is not equal to BUFREQ_OK,\n
                              PduInfoPtr is undefined and shall not be used.
\return   BufReq_ReturnType\n
          BUFREQ_OK           Buffer request accomplished successful\n
          BUFREQ_E_NOT_OK     The PDU Router is in the PDUR_UNINIT state\n
                              or the CanTpRxPduId is not valid\n
                              or the CanTpRxPduId is not forwarded in this identity\n
                              or the PduInfoPtr is not valid\n
                              or the request was not accepted by the destination layer.\n
          BUFREQ_E_BUSY       Currently no buffer of the requested size is available.\n
                              It's up the requestor to retry request for a certain time.\n
                              The request was not accepted by the upper layer.\n
          BUFREQ_E_OVFL       The upper TP module is not able to receive the number of bytes.\n
                              The request was not accepted by the destination layer.
\pre      PduR_Init() is executed successfully and the PDU Router is in PDUR_ONLINE state.
\context  This function can be called on interrupt and task level and has not to be interrupted by other\n
          PduR_CanTpProvideRxBuffer calls for the same CanTpRxPduId.
\note     The function is called by CanTp.
*/
FUNC(BufReq_ReturnType, PDUR_CODE) PduR_CanTpProvideRxBuffer(PduIdType CanTpRxPduId, PduLengthType TpSduLength, P2VAR(PduInfoTypeApplPtr, AUTOMATIC, PDUR_APPL_DATA) PduInfoPtr);
/**
\brief    This function is called by the CanTp to query the transmit data of an I-PDU segment.\n
          With each call to this function the PDU Router provides the next part of the TP transmit data.\n
          The PDU Router evaluates the CanTp I-PDU handle and performs appropriate handle and port conversion.\n
          The call is routed to an upper Tp or gateway module using the appropriate I-PDU handle of the destination layer.\n
\param    CanTpTxPduId        ID of the CanTp I-PDU that will be transmitted
\param    PduInfoPtr          Pointer to the destination buffer and the number of bytes to provide\n
                              In case of gateway the lower layer module will copy otherwise the source upper layer\n
                              module will copy the data. If no enough transmit data is available, no data are copied.
\param    Length              Exact length of the requested transmit buffer.\n
                              It shall not exceed the number of bytes still to be sent.\n
                              This parameter is needed by the transport protocol to perform error.\n
                              recovery mechanisms. If no error recovery is configured for this PduId,\n
                              Length may be zero, which indicates that the provided buffer can be of arbitrary size (larger than zero)
\return   BufReq_ReturnType\n
          BUFREQ_OK           The data has been successfully copied to the transmit buffer\n
          BUFREQ_E_NOT_OK     The PDU Router is in the PDUR_UNINIT state\n
                              or the CanTpTxPduId is not valid\n
                              or the CanTpTxPduId is not forwarded in this identity\n
                              or the PduInfoPtr is not valid\n
                              or the request was not accepted by the destination layer.\n
          BUFREQ_E_BUSY       The request cannot be processed because the TX data is not available.\n
                              and no data has been copied. The TP layer might retry later the copy process.
\pre      PduR_Init() is executed successfully and the PDU Router is in PDUR_ONLINE state.
\context  This function can be called on interrupt and task level and has not to be interrupted by other\n
          PduR_CanTpProvideTxBuffer calls for the same CanTpTxPduId.
\note     The function is called by CanTp.
*/
FUNC(BufReq_ReturnType, PDUR_CODE) PduR_CanTpProvideTxBuffer(PduIdType CanTpTxPduId, P2VAR(PduInfoTypeApplPtr, AUTOMATIC, PDUR_APPL_DATA) PduInfoPtr, PduLengthType Length);
/**
\brief    The function is called by the CanTp to indicate the complete reception of a CanTp I-PDU or to report\n
          an error that occurred during reception. The PDU Router evaluates the CanTp I-PDU handle and performs\
          appropriate handle and port conversion. The call is routed to an upper Tp module using the appropriate I-PDU handle\n
          of the destination layer.
\param    CanTpRxPduId                    ID of the received CanTp I-PDU
\param    Result                          Result of the TP reception\n
          NTFRSLT_OK                      The TP reception has been completed successfully.\n
          NTFRSLT_E_NOT_OK                The PDU Router is in the PDUR_UNINIT state\n
                                          or the CanTpRxPduId is not valid\n
                                          or the CanTpRxPduId is not forwarded in this identity\n
                                          or the request was not accepted by the destination upper layer.\n
          NTFRSLT_E_TIMEOUT_A             The TP reception has not been completed successfully.\n
          NTFRSLT_E_TIMEOUT_Cr            The TP reception has not been completed successfully.\n
          NTFRSLT_E_WRONG_SN              The TP reception has not been completed successfully.\n
          NTFRSLT_E_UNEXP_PDU             The TP reception has not been completed successfully.\n
          NTFRSLT_E_NO_BUFFER             The TP reception has not been completed successfully.\n
          NTFRSLT_E_CANCELLATION_OK       The TP reception has been cancelled successfully.\n
          NTFRSLT_E_CANCELLATION_NOT_OK   The TP reception has not been cancelled.
\return   none
\pre      PduR_Init() is executed successfully and the PDU Router is in PDUR_ONLINE state.
\context  This function can be called on interrupt and task level and has not to be interrupted by other\n
          PduR_CanTpRxIndication calls for the same CanTpRxPduId.
\note     The function is called by CanTp.
*/
FUNC(void, PDUR_CODE) PduR_CanTpRxIndication(PduIdType CanTpRxPduId, NotifResultType Result);
/**
\brief    The function is called by the CanTp to confirm the complete transmission of a CanTp I-PDU or to report\n
          an error that occurred during reception. The PDU Router evaluates the CanTp I-PDU handle and performs\n
          appropriate handle and port conversion.The call is routed to an upper Tp module using the appropriate I-PDU handle
          of the destination layer.
\param    CanTpTxPduId                    ID of the transmitted CanTp I-PDU
\param    Result                          Result of the TP transmission\n
          NTFRSLT_OK                      The TP transmission has been completed successfully.\n
          NTFRSLT_E_NOT_OK                The PDU Router is in the PDUR_UNINIT state\n
                                          or the CanTpTxPduId is not valid\n
                                          or the CanTpTxPduId is not forwarded in this identity\n
                                          or the request was not accepted by the destination upper layer.\n
          NTFRSLT_E_TIMEOUT_A             The TP transmission has not been completed successfully.\n
          NTFRSLT_E_TIMEOUT_Bs            The TP transmission has not been completed successfully.\n
          NTFRSLT_E_INVALID_FS            The TP transmission has not been completed successfully.\n
          NTFRSLT_E_WFT_OVRN              The TP transmission has not been completed successfully.\n
          NTFRSLT_E_NO_BUFFER             The TP transmission has not been completed successfully.\n
          NTFRSLT_E_CANCELLATION_OK       The TP transmission has been cancelled successfully.\n
          NTFRSLT_E_CANCELLATION_NOT_OK   The TP transmission has not been cancelled.
\return   none
\pre      PduR_Init() is executed successfully and the PDU Router is in PDUR_ONLINE state.
\context  This function can be called on interrupt and task level and has not to be interrupted by other\n
          PduR_CanTpTxConfirmation calls for the same CanTpTxPduId.
\note     The function is called by CanTp.
*/
FUNC(void, PDUR_CODE) PduR_CanTpTxConfirmation(PduIdType CanTpTxPduId, NotifResultType Result);


#define PDUR_STOP_SEC_CODE
/*lint -save -esym(961, 19.1) */
/* PRQA S 5087 1 */ /* MD_MSR_19.1 */
#include "MemMap.h"
/*lint -restore */


#endif /* PDUR_CANTP_H */
